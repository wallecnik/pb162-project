#BlueJ class context
comment0.params=label\ vert
comment0.target=void\ addVertex(java.lang.String,\ Vertex2D)
comment0.text=\n\ Adds\ new\ vertex\ to\ polygon\n\n\ @param\ label\ name\ of\ the\ vertex\ (usually\ literal)\n\ @param\ vert\ \ vertex\ to\ be\ added\n
comment1.params=index
comment1.target=Vertex2D\ getVertex(int)
comment1.text=\n\ Returns\ vertex\ at\ given\ index\ modulo\ number\ of\ indices.\n\n\ @param\ index\ vertex\ index\n\ @return\ vertex\ at\ given\ index\ modulo\ number\ of\ indices\n\ @throws\ IllegalArgumentException\ if\ index\ is\ negative\n
comment10.params=file
comment10.target=void\ write(java.io.File)
comment10.text=\n\ Takes\ an\ opened\ file\ and\ writes\ into\ it\n\n\ @param\ file\ already\ opened\ file\ to\ write\ into\n\ @throws\ IOException\ if\ some\ IO\ error\ occurs\n
comment11.params=is
comment11.target=void\ read(java.io.InputStream)
comment11.text=\n\ Takes\ an\ opened\ stream\ and\ reads\ from\ it\n\n\ @param\ is\ already\ opened\ stream\ to\ read\ from\n\ @throws\ IOException\ if\ some\ IO\ error\ occurs\n
comment12.params=file
comment12.target=void\ read(java.io.File)
comment12.text=\n\ Takes\ an\ opened\ file\ and\ reads\ from\ it\n\n\ @param\ file\ already\ opened\ file\ to\ read\ from\n\ @throws\ IOException\ if\ some\ IO\ error\ occurs\n
comment13.params=os
comment13.target=void\ binaryWrite(java.io.OutputStream)
comment13.text=\n\ Takes\ an\ opened\ stream\ and\ writes\ into\ it\n\ Does\ not\ use\ writer,\ but\ writes\ binary\ data\n\n\ @param\ os\ already\ opened\ stream\ to\ write\ into\n\ @throws\ IOException\ if\ some\ IO\ error\ occurs\n
comment2.params=label
comment2.target=Vertex2D\ getVertex(java.lang.String)
comment2.text=\n\ Returns\ vertex\ named\ by\ the\ label\ parameter\n\n\ @param\ label\ vertex\ index\n\ @return\ vertex\ at\ given\ label\n\ @throws\ IllegalArgumentException\ if\ label\ does\ not\ exist\n
comment3.params=
comment3.target=int\ getNumVertices()
comment3.text=\n\ Returns\ number\ of\ vertices\ of\ the\ polygon.\n\n\ @return\ number\ of\ vertices\n
comment4.params=
comment4.target=java.util.Collection\ getLabels()
comment4.text=\n\ Returns\ a\ sorted\ set\ of\ keys\ of\ this\ polygon\ in\ ascending\ order\n\n\ @return\ set\ of\ keys\n
comment5.params=vert
comment5.target=java.util.Collection\ getLabels(Vertex2D)
comment5.text=\n\ Returns\ all\ labels\ of\ given\ vertex\n\n\ @param\ vert\ vertex\ to\ find\ labels\ for\n\ @return\ set\ of\ keys\n
comment6.params=
comment6.target=java.util.Collection\ duplicateVertices()
comment6.text=\n\ Returns\ vertexes\ on\ duplicite\ positions,\ but\ each\ position\ only\ once\n\n\ @return\ set\ of\ vertexes\ that\ are\ duplicite\ in\ the\ polygon\n
comment7.params=
comment7.target=java.util.Collection\ getSortedVertices()
comment7.text=\n\ Returns\ a\ sorted\ collection\ of\ vertices\ in\ ascending\ order\n\n\ @return\ set\ of\ vertices\n
comment8.params=comparator
comment8.target=java.util.Collection\ getSortedVertices(java.util.Comparator)
comment8.text=\n\ Returns\ a\ sorted\ collection\ of\ vertices\ sorted\ with\ given\ comparator\n\n\ @return\ set\ of\ vertices\n
comment9.params=os
comment9.target=void\ write(java.io.OutputStream)
comment9.text=\n\ Takes\ an\ opened\ stream\ and\ writes\ into\ it\n\n\ @param\ os\ already\ opened\ stream\ to\ write\ into\n\ @throws\ IOException\ if\ some\ IO\ error\ occurs\n
numComments=14
