#BlueJ class context
comment0.params=x\ y
comment0.target=Vertex2D(double,\ double)
comment0.text=\n\ Construtor\ creating\ the\ vertex\n\ \n\ @param\ x\ \ coordinate\ x\ of\ the\ vertex\n\ @param\ y\ \ coordinate\ y\ of\ the\ vertex\n
comment1.params=vert
comment1.target=double\ distance(Vertex2D)
comment1.text=\n\ Calculates\ the\ distance\ between\ this\ and\ given\ vertex\n\ \n\ @param\ \ vert\ object\ of\ type\ Vertex2D\ for\ the\ distance\ calculation\n\ @return\ \ \ \ \ \ distance\ of\ the\ two\ vertexes\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ Prints\ the\ coordinates\ of\ the\ point\n\ \n\ @return\ \ coordinates\ of\ the\ point\ in\ brackets\n
comment3.params=
comment3.target=double\ getX()
comment4.params=
comment4.target=double\ getY()
comment5.params=o
comment5.target=boolean\ equals(java.lang.Object)
comment6.params=
comment6.target=int\ hashCode()
comment7.params=vert
comment7.target=int\ compareTo(Vertex2D)
comment7.text=\n\ Compares\ this\ object\ with\ the\ specified\ object\ for\ order.\ \ Returns\ a\n\ negative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ object\ is\ less\n\ than,\ equal\ to,\ or\ greater\ than\ the\ specified\ object.\n\ <p/>\n\ <p>The\ implementor\ must\ ensure\ <tt>sgn(x.compareTo(y))\ \=\=\n\ -sgn(y.compareTo(x))</tt>\ for\ all\ <tt>x</tt>\ and\ <tt>y</tt>.\ \ (This\n\ implies\ that\ <tt>x.compareTo(y)</tt>\ must\ throw\ an\ exception\ iff\n\ <tt>y.compareTo(x)</tt>\ throws\ an\ exception.)\n\ <p/>\n\ <p>The\ implementor\ must\ also\ ensure\ that\ the\ relation\ is\ transitive\:\n\ <tt>(x.compareTo(y)&gt;0\ &amp;&amp;\ y.compareTo(z)&gt;0)</tt>\ implies\n\ <tt>x.compareTo(z)&gt;0</tt>.\n\ <p/>\n\ <p>Finally,\ the\ implementor\ must\ ensure\ that\ <tt>x.compareTo(y)\=\=0</tt>\n\ implies\ that\ <tt>sgn(x.compareTo(z))\ \=\=\ sgn(y.compareTo(z))</tt>,\ for\n\ all\ <tt>z</tt>.\n\ <p/>\n\ <p>It\ is\ strongly\ recommended,\ but\ <i>not</i>\ strictly\ required\ that\n\ <tt>(x.compareTo(y)\=\=0)\ \=\=\ (x.equals(y))</tt>.\ \ Generally\ speaking,\ any\n\ class\ that\ implements\ the\ <tt>Comparable</tt>\ interface\ and\ violates\n\ this\ condition\ should\ clearly\ indicate\ this\ fact.\ \ The\ recommended\n\ language\ is\ "Note\:\ this\ class\ has\ a\ natural\ ordering\ that\ is\n\ inconsistent\ with\ equals."\n\ <p/>\n\ <p>In\ the\ foregoing\ description,\ the\ notation\n\ <tt>sgn(</tt><i>expression</i><tt>)</tt>\ designates\ the\ mathematical\n\ <i>signum</i>\ function,\ which\ is\ defined\ to\ return\ one\ of\ <tt>-1</tt>,\n\ <tt>0</tt>,\ or\ <tt>1</tt>\ according\ to\ whether\ the\ value\ of\n\ <i>expression</i>\ is\ negative,\ zero\ or\ positive.\n\n\ @param\ vert\ the\ object\ to\ be\ compared.\n\ @return\ a\ negative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ object\n\ is\ less\ than,\ equal\ to,\ or\ greater\ than\ the\ specified\ object.\n\ @throws\ NullPointerException\ if\ the\ specified\ object\ is\ null\n\ @throws\ ClassCastException\ \ \ if\ the\ specified\ object's\ type\ prevents\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ from\ being\ compared\ to\ this\ object.\n
numComments=8
